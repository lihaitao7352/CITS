-- 修改后的 sql1
SELECT 
    PHJD.PHJD_KHA_COD AS KHA_COD,
    SKMD.SKMD_SZK_COD AS SZK_COD,
    PHJD.PHJD_KM_COD AS KM_COD,
    PHJD.PHJD_TAS_YDO AS TAS_YDO,
    PPJD.PPJD_KM_COD AS IRS_KM_COD,
    SSKMD.SKMD_SZK_COD AS IRS_SZK_COD,
    SUM(NVL(PHJD.PHJD_4M_JSC, 0)) AS JSC_4M,
    SUM(NVL(PHJD.PHJD_5M_JSC, 0)) AS JSC_5M,
    SUM(NVL(PHJD.PHJD_6M_JSC, 0)) AS JSC_6M,
    SUM(NVL(PHJD.PHJD_7M_JSC, 0)) AS JSC_7M,
    SUM(NVL(PHJD.PHJD_8M_JSC, 0)) AS JSC_8M,
    SUM(NVL(PHJD.PHJD_9M_JSC, 0)) AS JSC_9M,
    SUM(NVL(PHJD.PHJD_10M_JSC, 0)) AS JSC_10M,
    SUM(NVL(PHJD.PHJD_11M_JSC, 0)) AS JSC_11M,
    SUM(NVL(PHJD.PHJD_12M_JSC, 0)) AS JSC_12M,
    SUM(NVL(PHJD.PHJD_1M_JSC, 0)) AS JSC_1M,
    SUM(NVL(PHJD.PHJD_2M_JSC, 0)) AS JSC_2M,
    SUM(NVL(PHJD.PHJD_3M_JSC, 0)) AS JSC_3M
FROM 
    BGTA2_PHJD PHJD
    INNER JOIN BGTA3_PPJD PPJD ON PHJD.PHJD_KHA_COD = PPJD.PPJD_KHA_COD
        AND PHJD.PHJD_IRS_PJ_COD = PPJD.PPJD_PJ_COD
        AND PHJD.PHJD_PJ_COD = PPJD.PPJD_IRM_PJ_COD
    INNER JOIN BGTAZ_PTCD PTCD ON PTCD.PTCD_KHA_COD = PHJD.PHJD_KHA_COD
        AND PTCD.PTCD_PJ_COD = PHJD.PHJD_PJ_COD
    INNER JOIN BGTA2_SKMD SKMD ON SKMD.SKMD_KHA_COD = PHJD.PHJD_KHA_COD
        AND SKMD.SKMD_KM_COD = PHJD.PHJD_KM_COD
        AND SKMD.SKMD_KBS_VER_ID = '60'
    INNER JOIN BGTA2_SKMD SSKMD ON SSKMD.SKMD_KM_COD = PPJD.PPJD_KM_COD
        AND SSKMD.SKMD_KHA_COD = PPJD.PPJD_KHA_COD
        AND SSKMD.SKMD_KBS_VER_ID = '60'
WHERE 
    PHJD.PHJD_KHA_COD = '20512'
    AND PHJD.PHJD_TAS_YDO = '2023'
    AND PHJD.PHJD_GHM_LV1_COD = '52'
    AND PHJD.PHJD_YSS_DTK_COD = '9'
    AND PHJD.PHJD_YSS_DTB_COD = '92'
GROUP BY 
    PHJD.PHJD_KHA_COD,
    SKMD.SKMD_SZK_COD,
    PHJD.PHJD_KM_COD,
    PHJD.PHJD_TAS_YDO,
    PPJD.PPJD_KM_COD,
    SSKMD.SKMD_SZK_COD
ORDER BY 
    PHJD.PHJD_KHA_COD,
    SKMD.SKMD_SZK_COD,
    PHJD.PHJD_KM_COD,
    PHJD.PHJD_TAS_YDO;


--sql2

SELECT PHJD.PHJD_KHA_COD AS KHA_COD
      ,SKMD.SKMD_SZK_COD AS SZK_COD
      ,PHJD.PHJD_KM_COD AS KM_COD
      ,PHJD.PHJD_TAS_YDO AS TAS_YDO
      ,PPJD.PPJD_KM_COD AS IRS_KM_COD
      ,SSKMD.SKMD_SZK_COD AS IRS_SZK_COD
      ,SUM(NVL(PHJD.PHJD_4M_JSC, 0) ) AS JSC_4M
      ,SUM(NVL(PHJD.PHJD_5M_JSC, 0) ) AS JSC_5M
      ,SUM(NVL(PHJD.PHJD_6M_JSC, 0) ) AS JSC_6M
      ,SUM(NVL(PHJD.PHJD_7M_JSC, 0) ) AS JSC_7M
      ,SUM(NVL(PHJD.PHJD_8M_JSC, 0) ) AS JSC_8M
      ,SUM(NVL(PHJD.PHJD_9M_JSC, 0) ) AS JSC_9M
      ,SUM(NVL(PHJD.PHJD_10M_JSC, 0) ) AS JSC_10M
      ,SUM(NVL(PHJD.PHJD_11M_JSC, 0) ) AS JSC_11M
      ,SUM(NVL(PHJD.PHJD_12M_JSC, 0) ) AS JSC_12M
      ,SUM(NVL(PHJD.PHJD_1M_JSC, 0) ) AS JSC_1M
      ,SUM(NVL(PHJD.PHJD_2M_JSC, 0) ) AS JSC_2M
      ,SUM(NVL(PHJD.PHJD_3M_JSC, 0) ) AS JSC_3M
  FROM BGTA2_PHJD PHJD
 INNER JOIN BGTA3_PPJD PPJD ON PPJD.PPJD_KHA_COD = PHJD.PHJD_KHA_COD
   AND PPJD.PPJD_PJ_COD = PHJD.PHJD_IRS_PJ_COD
   AND PPJD.PPJD_IRM_PJ_COD = PHJD.PHJD_PJ_COD
 INNER JOIN BGTA2_SKMD SSKMD ON SSKMD.SKMD_KHA_COD = PPJD.PPJD_KHA_COD
   AND SSKMD.SKMD_KBS_VER_ID = '60'
   AND SSKMD.SKMD_KM_COD = PPJD.PPJD_KM_COD
 INNER JOIN BGTAZ_PTCD PTCD ON PTCD.PTCD_KHA_COD = PHJD.PHJD_KHA_COD
   AND PTCD.PTCD_PJ_COD = PHJD.PHJD_PJ_COD
 INNER JOIN BGTA2_SKMD SKMD ON SKMD.SKMD_KHA_COD = PHJD.PHJD_KHA_COD
   AND SKMD.SKMD_KBS_VER_ID = '60'
   AND SKMD.SKMD_KM_COD = PHJD.PHJD_KM_COD
 WHERE PHJD.PHJD_KHA_COD = '20512'
   AND PHJD.PHJD_TAS_YDO BETWEEN '2023'AND '2023'
   AND PHJD.PHJD_GHM_LV1_COD = '52'
   AND PHJD.PHJD_YSS_DTK_COD = '9'
   AND PHJD.PHJD_YSS_DTB_COD = '92'
 GROUP BY PHJD.PHJD_KHA_COD
         ,SKMD.SKMD_SZK_COD
         ,PHJD.PHJD_KM_COD
         ,PHJD.PHJD_TAS_YDO
         ,PPJD.PPJD_KM_COD
         ,SSKMD.SKMD_SZK_COD
 ORDER BY PHJD.PHJD_KHA_COD
         ,SKMD.SKMD_SZK_COD
         ,PHJD.PHJD_KM_COD
         ,PHJD.PHJD_TAS_YDO


————————————————————————————————————————————————
期間指定の条件の違い:

SQL1ではPHJD.PHJD_TAS_YDO = '2023'としていますが、これは2023年のデータだけを厳密に取得します。
SQL2ではPHJD.PHJD_TAS_YDO BETWEEN '2023' AND '2023'としていますが、これはSQL1と同様の条件ですが、書き方が異なります。これはSQL1の条件を明確化するための改善です。
JOIN条件の違い:

両方のクエリで使用されているJOIN条件は基本的に同じですが、SQL1では各テーブルの参照が整理され、明確にされています。これにより、クエリの読みやすさが向上しています。
ORDER BY節の簡略化:

SQL1では、SQL2と同じORDER BY節を使用しています。両方のクエリで同じ並べ替え基準を維持していますが、これにより結果の一貫性が保たれています。
集約関数の使用:

両方のクエリで同様にSUM(NVL(..., 0))を使用していますが、これはnull値を0として扱い、データの不整合を避けるための良い習慣です。
性能面の考慮:

SQL1では特に新しいパフォーマンス向上の技術は導入されていませんが、SQLの構造を整理して可読性を高めることは間接的に性能のトラブルシューティングや最適化に寄与することがあります。
